package handler

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"strconv"

	"github.com/kenty51107/task-matcher/graph/generated"
	"github.com/kenty51107/task-matcher/internal/app/domain/model"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.CreateTaskInput) (*model.Task, error) {
	row, err := r.TP.CreateTask(&input)
	if err != nil {
		return nil, err
	}
	return row, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, input model.UpdateTaskInput) (*model.Task, error) {
	row, err := r.TP.UpdateTask(&input)
	if err != nil {
		return nil, err
	}
	return row, nil
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, input model.DeleteTaskInput) (*model.Task, error) {
	row, err := r.TP.DeleteTask(&input)
	if err != nil {
		return nil, err
	}
	return row, nil
}

// GetTask is the resolver for the getTask field.
func (r *queryResolver) GetTask(ctx context.Context, id string) (*model.Task, error) {
	id_i, _ := strconv.Atoi(id)
	row, err := r.TP.FindTaskByID(id_i)
	if err != nil {
		return nil, err
	}
	return row, nil
}

// GetTasks is the resolver for the getTasks field.
func (r *queryResolver) GetTasks(ctx context.Context) ([]*model.Task, error) {
	rows, err := r.TP.FindTasks()
	if err != nil {
		return nil, err
	}
	return rows, nil

}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
