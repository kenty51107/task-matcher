package handler

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"
	"strconv"

	"github.com/kenty51107/task-matcher/graph/generated"
	"github.com/kenty51107/task-matcher/internal/app/domain/model"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.CreateTaskInput) (*model.Task, error) {
	row, err := r.TP.CreateTask(&input)
	if err != nil {
		return nil, err
	}
	return row, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, input model.UpdateTaskInput) (*model.Task, error) {
	fmt.Println("test")
	row, err := r.TP.UpdateTask(&input)
	if err != nil {
		return nil, err
	}
	return row, nil
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, input model.DeleteTaskInput) (*model.Task, error) {
	err := r.TP.DeleteTask(&input)
	if err != nil {
		return nil, err
	}
	return nil, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	row, err := r.UP.CreateUser(&input)
	if err != nil {
		return nil, err
	}
	return row, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUserInput) (*model.User, error) {
	row, err := r.UP.UpdateUser(&input)
	if err != nil {
		return nil, err
	}
	return row, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input model.DeleteUserInput) (*model.User, error) {
	err := r.UP.DeleteUser(&input)
	if err != nil {
		return nil, err
	}
	return nil, nil
}

// GetTask is the resolver for the getTask field.
func (r *queryResolver) GetTask(ctx context.Context, id *string) (*model.Task, error) {
	id_i, _ := strconv.Atoi(*id)
	row, err := r.TP.FindTaskByID(id_i)
	if err != nil {
		return nil, err
	}
	return row, nil
}

// GetTasks is the resolver for the getTasks field.
func (r *queryResolver) GetTasks(ctx context.Context, orderBy *model.TaskOrderInput) ([]*model.Task, error) {
	rows, err := r.TP.FindTasks(orderBy)
	if err != nil {
		return nil, err
	}
	return rows, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id *string) (*model.User, error) {
	id_i, _ := strconv.Atoi(*id)
	row, err := r.UP.FindUserByID(id_i)
	if err != nil {
		return nil, err
	}
	return row, nil
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*model.User, error) {
	rows, err := r.UP.FindUsers()
	if err != nil {
		return nil, err
	}
	return rows, nil
}

// GetUserByEmail is the resolver for the getUserByEmail field.
func (r *queryResolver) GetUserByEmail(ctx context.Context, email *string) (*model.User, error) {
	row, err := r.UP.FindUserByEmail(*email)
	if err != nil {
		return nil, err
	}
	return row, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
